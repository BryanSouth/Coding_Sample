This work is both from my NASA internship and for my thesis research. The goal of this project was to enhance the autonomous driving capabilities of planetary rovers. The focus was on the detection on "unseen" obstacles, like unsafe terrain. A secondary objective was identifying terrain that may be scientifically appealing and to allow rovers to do so autonomously. Data from an instrumented rover wheel was used to carry out these objectives. I was involved with both the hardware and data science aspects of the project. Unfortunately, due to security restrictions, I'm unable to share all of my work for this project, however, what I am able to share is the end result of a large portion of my thesis research. 

RF_Terrain_Classifier.py contains a Random Forest classifier model. As the name suggests, the model classifies the terrain type based on the instrumented rover wheel data. The wheel was tested on several simulants which served as the class labels. The intention of this script was to show that the data, and thus the novel wheel design, could be used to classify terrain. An unsupervised method is required for actual deployment on a planet, but this preliminary work successfully proved the validity of the project and opened the door to further NASA funding. By classifying terrain based on its characteristics, unsafe terrain can be identified which allows autonomous rover control systems to issue "go" or "no go" commands or halt the rover if scientifically interesting terrain is encountered.  

TS_Classifier.py was used to compare against the conventional random forest results. TsFresh is used in this script, which extracts features from time series data. The pipeline then trains a random forest on these extracted features. This was done to see if there were any interesting patterns in the sensor data that TsFresh would pick up on. In the end, the random forest in RF_Terrain_Classifier.py with the engineered sensor features performed better.  

Terrain_Classifier_Data_Prep.py processes the rover wheel data, engineers the features, and compiles the time series features together in a nice npy file to be imported into other scripts where necessary. There is backend software extending beyond this script which I'm not able to share, but I wanted to include this to show that I'm capable of working with large quantities of data from multiple sensors (~12000 data points from each sensor in this case).

For this project I also coded other regression scripts to transform the data using mathematical models into useable information such as: terrain cohesion and angle of friction, and grain size. While the regression techniques were simple, and I don't believe would add anything to showing my coding abilities, the use of the data and mathematical models was novel, and have offered planetary scientists a method to obtain information they previously could not. 

